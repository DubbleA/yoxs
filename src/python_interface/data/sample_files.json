[
    {
        "name": "Hello World",
        "code": "puts(\"hello\", \"world\", \"how\", \"are\", \"you\") let hello = fn() {     puts(\"Hello World!\"); }; hello();"
    },
    {
        "name": "Conditional Statements",
        "code": "let x = 10; if (x > 5) {     puts(\"x is greater than 5\"); } else {     puts(\"x is less than or equal to 5\"); }"
    },
    {
        "name": "Factorial Program",
        "code": "let factorial = fn(n) {     if (n == 0) {         return 1;     } else {         return n * factorial(n - 1);     } }; puts(factorial(5));"
    },
    {
        "name": "Working with Arrays & Recursion",
        "code": "let array = [1, 2, 3, 4, 5]; let sum = fn(arr, i) {     if (i == len(arr)) {         return 0;     } else {         return arr[i] + sum(arr, i + 1);     } }; puts(sum(array, 0));"
    },
    {
        "name": "Calculate the Power of a Number",
        "code": "let power = fn(base, exp) {     if (exp == 0) {         return 1;     } else {         return base * power(base, exp - 1);     } }; puts(power(2, 8));"
    },
    {
        "name": "Simple Calculator",
        "code": "let add = fn(a, b) { return a + b; }; let subtract = fn(a, b) { return a - b; }; let multiply = fn(a, b) { return a * b; }; let divide = fn(a, b) { return a / b; }; puts(\"Add: \" + add(10, 5)); puts(\"Subtract: \" + subtract(10, 5)); puts(\"Multiply: \" + multiply(10, 5)); puts(\"Divide: \" + divide(10, 5));"
    },
    {
        "name": "Recursive String Reverse",
        "code": "let reverse = fn(s) {     let helper = fn(s, i) {         if (i < 0) {             return \"\";         } else {             return s[i] + helper(s, i - 1);         }     };     return helper(s, len(s) - 1); }; puts(reverse(\"Monkey\"));"
    },
    {
        "name": "Recursive Prime Number Check",
        "code": "let isPrime = fn(number) {     let checkPrime = fn(number, divisor) {         if (number < 2) {             return false;         } else if (divisor == 1) {             return true;         } else {             if (number % divisor == 0) {                 return false;             } else {                 return checkPrime(number, divisor - 1);             }         }     };     return checkPrime(number, number - 1); }; let n = 19; if (isPrime(n)) {     puts(n + \" is a prime number\"); } else {     puts(n + \" is not a prime number\"); }"
    }
]
